version: '3.6'
services:

  bninit:
    image: udpnnetwork/bninit:v1.7.0
    container_name: bninit
    restart: always
    environment:
      - TZ=Asia/Shanghai
      - server.port=8080
      - vn.init.file.path=/data/init/vninit.yml
      - spring.cloud.nacos.discovery.server-addr=nacos:8848
      - spring.cloud.nacos.discovery.username=nacos
      - spring.cloud.nacos.discovery.password=nacos
      - spring.cloud.nacos.discovery.namespace=bn
      - NACOS_ADDR=nacos:8848
      - NACOS_USERNAM=nacos
      - NACOS_PSW=nacos
      - NACOS_NAMESPACE=bn
    #command: 
    #  - /bin/bash
    #  - -c
    #  - "envsubst '$${ENV_VN_GATEWAY},$${ENV_VN_CODE}' </data/init/vninit.template> /data/init/vninit.yml && 
    #     envsubst '$${ENV_VN_GATEWAY},$${ENV_BESU_DID_CONTADDRESS},$${ENV_BESU_CPT_CONTADDRESS},$${ENV_BESU_AUTHISSUERADDRESS}' </data/init/did_proxy.template> /data/init/did_proxy.properties && \
    #     exec java -Djava.security.egd=file:/dev/./urandom -jar /app.jar"
    command: ["/bin/bash", "-c", "java -Djava.security.egd=file:/dev/./urandom -jar /app.jar"]
    volumes:
      - ${BN_DATA_VOLUMES}/log:/data:rw
      - ./bnserver/init/vninit.yml:/data/init/vninit.yml:rw
      - /etc/localtime:/etc/localtime:ro
    ports:
      - ${BN_INIT_PORT}:8080
    # depends_on:
    #   - nacos
    networks:
      - udpn-bn
    #healthcheck: 
    #  test: ["CMD-SHELL", "curl -sS 'http://localhost:8080' || exit 1"]
    #  interval: 5s 
    #  timeout: 5s 
    #  retries: 3 
    #  start_period: 600s 

  bngateway:
    image: udpnnetwork/bngateway:v1.7.0
    container_name: bngateway
    restart: always
    environment:
      - TZ=Asia/Shanghai
      - server.port=8080
      - spring.cloud.nacos.discovery.server-addr=nacos:8848
      - spring.cloud.nacos.discovery.username=nacos
      - spring.cloud.nacos.discovery.password=nacos
      - spring.cloud.nacos.discovery.namespace=bn
      - NACOS_ADDR=nacos:8848
      - NACOS_USERNAM=nacos
      - NACOS_PSW=nacos
      - NACOS_NAMESPACE=bn
    command: ["/bin/bash", "-c", "java -Djava.security.egd=file:/dev/./urandom -jar /app.jar"]
    volumes:
      - ${BN_DATA_VOLUMES}/log:/data
      - ./bnserver/init:/data/init
      - /etc/localtime:/etc/localtime:ro
    ports:
      - ${BN_GATEWAY_PORT}:8080
    # depends_on:
    #   - nacos
    networks:
      - udpn-bn
    #healthcheck: 
    #  test: ["CMD-SHELL", "curl -sS 'http://localhost:8080' || exit 1"]
    #  interval: 5s 
    #  timeout: 5s 
    #  retries: 3 
    #  start_period: 600s 


  bn-event:
    image: udpnnetwork/bnevent:v1.7.0
    container_name: bn-event
    restart: always
    environment:
      - TZ=Asia/Shanghai
      - server.port=8080
      - spring.cloud.nacos.discovery.server-addr=nacos:8848
      - spring.cloud.nacos.discovery.username=nacos
      - spring.cloud.nacos.discovery.password=nacos
      - spring.cloud.nacos.discovery.namespace=bn
      - NACOS_ADDR=nacos:8848
      - NACOS_USERNAM=nacos
      - NACOS_PSW=nacos
      - NACOS_NAMESPACE=bn
    command: ["/bin/bash", "-c", "java -Djava.security.egd=file:/dev/./urandom -jar /app.jar"]
    volumes:
      - ${BN_DATA_VOLUMES}/log:/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - ${BN_EVENT_PORT}:8080
    depends_on:
      - bngateway
    networks:
      - udpn-bn

  bnpermission:
    image: udpnnetwork/bn-permission:v1.6.6.0.0
    container_name: bnpermission
    restart: always
    environment:
      - TZ=Asia/Shanghai
      - server.port=8080
      - spring.cloud.nacos.discovery.server-addr=nacos:8848
      - spring.cloud.nacos.discovery.username=nacos
      - spring.cloud.nacos.discovery.password=nacos
      - spring.cloud.nacos.discovery.namespace=bn
      - NACOS_ADDR=nacos:8848
      - NACOS_USERNAM=nacos
      - NACOS_PSW=nacos
      - NACOS_NAMESPACE=bn
    command: ["/bin/bash", "-c", "java -Djava.security.egd=file:/dev/./urandom -jar /app.jar"]
    volumes:
      - ${BN_DATA_VOLUMES}/log:/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - ${BN_PERMISSION_PORT}:8080
    depends_on:
      - bngateway
    networks:
      - udpn-bn
    #healthcheck: 
    #  test: ["CMD-SHELL", "curl -sS 'http://localhost:8080' || exit 1"]
    #  interval: 5s 
    #  timeout: 5s 
    # retries: 3 
    #  start_period: 600s 

  bnprocess:
    container_name: bnprocess
    image: udpnnetwork/bnprocess:v1.7.0
    restart: always
    environment:
      - TZ=Asia/Shanghai
      - server.port=8080
      - spring.cloud.nacos.discovery.server-addr=nacos:8848
      - spring.cloud.nacos.discovery.username=nacos
      - spring.cloud.nacos.discovery.password=nacos
      - spring.cloud.nacos.discovery.namespace=bn
      - NACOS_ADDR=nacos:8848
      - NACOS_USERNAM=nacos
      - NACOS_PSW=nacos
      - NACOS_NAMESPACE=bn
    command: ["/bin/bash", "-c", "java -Djava.security.egd=file:/dev/./urandom -jar /app.jar"]
    volumes:
      - ${BN_DATA_VOLUMES}/log:/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - ${BN_PROCESS_PORT}:8080
    depends_on:
      - bngateway
    networks:
      - udpn-bn
    #healthcheck: 
    #  test: ["CMD-SHELL", "curl -sS 'http://localhost:8080' || exit 1"]
    #  interval: 5s 
    #  timeout: 5s 
    #  retries: 3 
    #  start_period: 600s 

  bn-web:
    image: udpnnetwork/bn-web:v1.6.6.0.0
    container_name: bn-web
    restart: always
    volumes:
      - ${BN_DATA_VOLUMES}/bnweb/logs:/var/log/nginx
      - ./bnweb/config:/etc/nginx/conf.d/
    ports:
      - 8080:80
    depends_on:
      - bnpermission
      - bnprocess
    networks:
      - udpn-bn

  web_sandbox:
    image: udpnnetwork/boxweb:v1.7.0
    # build:
    #   context: ./web_sandbox/
    #   dockerfile: Dockerfile-sandbox
    container_name: web_sandbox
    restart: always
    environment:
      - ENV_VN_GATEWAY=${VN_GATEWAY}
    #command: /bin/sh -c "envsubst '$${ENV_VN_GATEWAY}' </etc/nginx/conf.d/default.template> /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;' "
    command: ["/bin/sh", "-c", "exec nginx -g 'daemon off;'"]
    volumes:
      - ${BN_DATA_VOLUMES}/web_sandbox/logs:/var/log/nginx
      - ./web_sandbox/config:/etc/nginx/conf.d
    ports:
      - 80:80
    depends_on:
      - bnpermission
      - bnprocess
    networks:
      - udpn-bn

networks:
  udpn-bn:
    driver: bridge
    name: udpn-bn